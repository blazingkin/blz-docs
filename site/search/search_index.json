{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the blz Docs site blz is a language designed to help developers produce fast, maintainable code by building best practices into the runtime. Specifically blz aims to: Reduce the complexity of getting code up and running Reduce the number of edge cases that a programmer needs to consider Enable efficient testing Provide fast standard libraries Allow code to be understood without needing to jump back and forth through several files This site hosts documentation for blz . Learn how to install the language . Look for a specific Package in the menu to find documentation.","title":"Home"},{"location":"#welcome-to-the-blz-docs-site","text":"blz is a language designed to help developers produce fast, maintainable code by building best practices into the runtime. Specifically blz aims to: Reduce the complexity of getting code up and running Reduce the number of edge cases that a programmer needs to consider Enable efficient testing Provide fast standard libraries Allow code to be understood without needing to jump back and forth through several files This site hosts documentation for blz . Learn how to install the language . Look for a specific Package in the menu to find documentation.","title":"Welcome to the blz Docs site"},{"location":"installation/","text":"How to install the blz language for various operating systems Already Installed? You can update blz by running blz-update Windows 1.) Install the Java JRE 2.) Add the Java bin folder to your PATH ( help from oracle ) 3.) Download the blz-ospl project from github 4.) Add the bin folder to your PATH 5.) From the command line, run blz -i GNU/Linux Option 1 (installation script) Use the installation script here or by curl https://blazingk.in/install_blz_unix.sh | bash (Always read scripts you download before running them). Option 2 (manual) 1.) Install Java 2.) Clone the blz-ospl project from github 3.) Add the blz-ospl 'bin' folder to your path echo 'export PATH=$PATH:INSTALLDIRECTORY/bin' >> ~/.bash_rc Where INSTALLDIRECTORY is the directory where you saved blz-ospl 4.) Reload your bash profile . ~/.bash_rc 5.) From the terminal, run blz -i MacOS Option 1 (installation script) Use the installation script available here . (Always read scripts you download before running them). Option 2 (manual) 1.) Install Java 2.) Clone the blz-ospl project from github 3.) Add the blz-ospl 'bin' folder to your path echo 'export PATH=$PATH:INSTALLDIRECTORY/bin' >> ~/.bash_profile Where INSTALLDIRECTORY is the directory where you saved blz-ospl 4.) Reload your bash profile . ~/.bash_profile 5.) From the terminal, run blz -i Docker The blz language is available as a docker image in the blzlang/blz dockerhub repository If you have docker already installed on your system, it is easy to try out! To run interactive mode 1.) docker run -it blzlang/blz -i To create a docker image 1.) Create a dockerfile FROM blzlang/blz 2.) Setup dockerfile as normal 3.) Use RUN blz YourFile.blz or CMD blz YourFile.blz","title":"Installation"},{"location":"installation/#already-installed","text":"You can update blz by running blz-update","title":"Already Installed?"},{"location":"installation/#windows","text":"1.) Install the Java JRE 2.) Add the Java bin folder to your PATH ( help from oracle ) 3.) Download the blz-ospl project from github 4.) Add the bin folder to your PATH 5.) From the command line, run blz -i","title":"Windows"},{"location":"installation/#gnulinux","text":"Option 1 (installation script) Use the installation script here or by curl https://blazingk.in/install_blz_unix.sh | bash (Always read scripts you download before running them). Option 2 (manual) 1.) Install Java 2.) Clone the blz-ospl project from github 3.) Add the blz-ospl 'bin' folder to your path echo 'export PATH=$PATH:INSTALLDIRECTORY/bin' >> ~/.bash_rc Where INSTALLDIRECTORY is the directory where you saved blz-ospl 4.) Reload your bash profile . ~/.bash_rc 5.) From the terminal, run blz -i","title":"GNU/Linux"},{"location":"installation/#macos","text":"Option 1 (installation script) Use the installation script available here . (Always read scripts you download before running them). Option 2 (manual) 1.) Install Java 2.) Clone the blz-ospl project from github 3.) Add the blz-ospl 'bin' folder to your path echo 'export PATH=$PATH:INSTALLDIRECTORY/bin' >> ~/.bash_profile Where INSTALLDIRECTORY is the directory where you saved blz-ospl 4.) Reload your bash profile . ~/.bash_profile 5.) From the terminal, run blz -i","title":"MacOS"},{"location":"installation/#docker","text":"The blz language is available as a docker image in the blzlang/blz dockerhub repository If you have docker already installed on your system, it is easy to try out! To run interactive mode 1.) docker run -it blzlang/blz -i To create a docker image 1.) Create a dockerfile FROM blzlang/blz 2.) Setup dockerfile as normal 3.) Use RUN blz YourFile.blz or CMD blz YourFile.blz","title":"Docker"},{"location":"Core/array/","text":"Updated as of blz v2.6 blz-ospl\\Packages\\Core\\ArrayUtil.blz Concatenate concatenate(arr) - Returns the resulting concatenation of two arrays. Example: my_arr_A = [0, 1, 2] my_arr_B = [3, 4, 5] my_arr_AB = my_arr_A.concatenate(my_arr_B) print(\"my_arr_AB: \" + my_arr_AB) Output: my_arr_AB: [0, 1, 2, 3, 4, 5] Contains contains?(element) - Returns true if the element is contained in the array and false otherwise. Example: my_arr = [1, 2] print(arr.contains?(1)) Output: true Copy Array Contents copy() - Returns a copy of the array. Example: my_arr = [0, 1, 2] my_arr_copy = my_arr.copy() print(my_arr_copy) Output: [0, 1, 2] Each each(method) - Takes a method and performs it on each element in the array. Example: my_arr = [\"apple\", \"peach\", \"cherry\"] my_arr.each(print) Output: apple peach cherry Empty empty?() - Returns true if the array is empty. Example: my_arr = [] print(my_arr.empty?()) my_arr2 = [1] print(my_arr2.empty?()) Output: true false Filter filter(method) - Selects the elements of the array that produce true when passed to the method Example: :is_even?(number) return number % 2 == 0 end :main arr = [1,2,3,4,5,6,7] print(arr.filter(is_even?)) end Output: [2, 4, 6] Fold Left fold_left(accumulator, method) - Collapses the array using the method with the accumulator and elements as parameters, from left to right. Example: :add(a, b) #method returns the sum of a and b return a + b end my_arr = [1, 2, 3, 4, 5] print(arr.fold_left(0, add)) print(arr.fold_left(5, add)) Output: 15 20 Fold Right fold_right(accumulator, method) - Collapses the array using the method with the accumulator and elements as parameters, from right to left. Example: :add(a, b) #method returns the sum of a and b return a + b end arr = [1, 2, 3, 4, 5] print(arr.fold_right(0, add)) print(arr.fold_right(5, add)) Output: 15 20 Length length() - Returns the length of the array. Example: my_arr = [0, 1, 2, 3] len = my_arr.length() print(\"my_arr length: \" + len) Output: my_arr length: 4 Map map(method) - Calls method on each element in the array. Example: my_arr = [\"apple\", \"peach\", \"cherry\"] my_arr.map(print) my_arr.map!(sort) print(my_arr) Output: apple peach cherry [aelpp, acehp, cehrry] Nil? nil?() - Is this array nil? (spoilers no) Example: print([1].nil?()) Output: false Remove remove(index) - Removes the element at the index from the array. Example: my_arr = [0, 1, 2, 3, 4, 5, 6] print(\"before remove: \" + arr) my_arr.remove!(3) print(\"after removing index 3: \" + my_arr) my_arr.remove!(5) print(\"after removing index 5: \" + my_arr) my_arr.remove!(0) print(\"after removing index 0: \" + my_arr) arr2 = my_arr.remove(1) print(\"arr2 makes a copy of my_arr and removes index 1: \" + arr2) Output: before remove: [0, 1, 2, 3, 4, 5, 6] after removing index 3: [0, 1, 2, 4, 5, 6] after removing index 5: [0, 1, 2, 4, 5] after removing index 0: [1, 2, 4, 5] arr2 makes a copy of my_arr and removes index 1: [1, 4, 5] Reverse Array Order reverse() - Reverses the order of elements in the array. Example: my_arr = [0, 1, 2, 3] my_arr = my_arr.reverse() print(my_arr) Output: [3, 2, 1, 0] Sample From Array sample() - Returns a random entry in the array Example: arr = [1, 2, 3, \"a\", \"b\", \"c\"] print(arr.sample()) print(arr.sample()) Sample Output: a 2 Show show() - Returns a string representation of the string Example: arr = [1, 2, \"a\", \"b\"] print(arr.show()) Output: [1, 2, a, b] Shuffle Array Contents shuffle() - Shuffles the contents of the array. Example: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] my_arr = my_arr.shuffle() new_arr = my_arr.shuffle() # will be my_arr shuffled again. print(\"my_arr: \" + my_arr) print(\"new_arr: \" + new_arr) Output: my_arr: [9, 3, 2, 1, 0, 6, 5, 7, 4, 8] new_arr: [1, 2, 9, 6, 8, 3, 7, 4, 0, 5] Size size() - Returns the size of the array. Example: my_arr = [0, 1, 2, 3] len = my_arr.size() print(\"my_arr length: \" + len) Output: my_arr length: 4 Slice slice(start, end) - Returns a slice of the array indexed from start to, but not including, end . Example: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] new_arr_1 = my_arr.slice(4, 8) # a sub-array new_arr_2 = my_arr.slice(0, array_length(my_arr)) # the entire array new_arr_3 = my_arr.slice(0, 0) # none of the array print(\"new_arr_1: \" + new_arr_1) print(\"new_arr_2: \" + new_arr_2) print(\"new_arr_3: \" + new_arr_3) Output: new_arr_1: [4, 5, 6, 7] new_arr_2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] new_arr_3: [] Sort by Ascending Order sort() - Sorts the array in ascending order. Example: my_arr = [9, 3, 2, 1, 0, 6, 5, 7, 4, 8] my_arr = my_arr.sort() print(my_arr) Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] To String to_string() - Return the array as a string. Example: my_arr = [1, 2, 3, 4] print(my_arr.to_string()) Output: [1, 2, 3, 4] # this is equivalent to the string \"[1, 2, 3, 4]\" To JSON to_json() - Returns a string that is a JSON representation of the array Example: arr = [1, 2, \"a\", \"b\"] print(arr.to_json()) Output: [1, 2, \"a\", \"b\"] Unique unique() - Returns a copy of the array with duplicate elements removed. Example: my_arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] my_arr = my_arr.unique() print(my_arr) my_arr = [2, 9, 2, 9, 9, 6, 4, 5, 9, 4, 3, 4, 6, 1, 5, 3, 4, 7, 5, 7, 8, 3] my_arr = my_arr.unique() print(my_arr) Output: [1, 2, 3, 4] [2, 9, 6, 4, 5, 3, 1, 7, 8]","title":"Arrays"},{"location":"Core/array/#concatenate","text":"concatenate(arr) - Returns the resulting concatenation of two arrays. Example: my_arr_A = [0, 1, 2] my_arr_B = [3, 4, 5] my_arr_AB = my_arr_A.concatenate(my_arr_B) print(\"my_arr_AB: \" + my_arr_AB) Output: my_arr_AB: [0, 1, 2, 3, 4, 5]","title":"Concatenate"},{"location":"Core/array/#contains","text":"contains?(element) - Returns true if the element is contained in the array and false otherwise. Example: my_arr = [1, 2] print(arr.contains?(1)) Output: true","title":"Contains"},{"location":"Core/array/#copy-array-contents","text":"copy() - Returns a copy of the array. Example: my_arr = [0, 1, 2] my_arr_copy = my_arr.copy() print(my_arr_copy) Output: [0, 1, 2]","title":"Copy Array Contents"},{"location":"Core/array/#each","text":"each(method) - Takes a method and performs it on each element in the array. Example: my_arr = [\"apple\", \"peach\", \"cherry\"] my_arr.each(print) Output: apple peach cherry","title":"Each"},{"location":"Core/array/#empty","text":"empty?() - Returns true if the array is empty. Example: my_arr = [] print(my_arr.empty?()) my_arr2 = [1] print(my_arr2.empty?()) Output: true false","title":"Empty"},{"location":"Core/array/#filter","text":"filter(method) - Selects the elements of the array that produce true when passed to the method Example: :is_even?(number) return number % 2 == 0 end :main arr = [1,2,3,4,5,6,7] print(arr.filter(is_even?)) end Output: [2, 4, 6]","title":"Filter"},{"location":"Core/array/#fold-left","text":"fold_left(accumulator, method) - Collapses the array using the method with the accumulator and elements as parameters, from left to right. Example: :add(a, b) #method returns the sum of a and b return a + b end my_arr = [1, 2, 3, 4, 5] print(arr.fold_left(0, add)) print(arr.fold_left(5, add)) Output: 15 20","title":"Fold Left"},{"location":"Core/array/#fold-right","text":"fold_right(accumulator, method) - Collapses the array using the method with the accumulator and elements as parameters, from right to left. Example: :add(a, b) #method returns the sum of a and b return a + b end arr = [1, 2, 3, 4, 5] print(arr.fold_right(0, add)) print(arr.fold_right(5, add)) Output: 15 20","title":"Fold Right"},{"location":"Core/array/#length","text":"length() - Returns the length of the array. Example: my_arr = [0, 1, 2, 3] len = my_arr.length() print(\"my_arr length: \" + len) Output: my_arr length: 4","title":"Length"},{"location":"Core/array/#map","text":"map(method) - Calls method on each element in the array. Example: my_arr = [\"apple\", \"peach\", \"cherry\"] my_arr.map(print) my_arr.map!(sort) print(my_arr) Output: apple peach cherry [aelpp, acehp, cehrry]","title":"Map"},{"location":"Core/array/#nil","text":"nil?() - Is this array nil? (spoilers no) Example: print([1].nil?()) Output: false","title":"Nil?"},{"location":"Core/array/#remove","text":"remove(index) - Removes the element at the index from the array. Example: my_arr = [0, 1, 2, 3, 4, 5, 6] print(\"before remove: \" + arr) my_arr.remove!(3) print(\"after removing index 3: \" + my_arr) my_arr.remove!(5) print(\"after removing index 5: \" + my_arr) my_arr.remove!(0) print(\"after removing index 0: \" + my_arr) arr2 = my_arr.remove(1) print(\"arr2 makes a copy of my_arr and removes index 1: \" + arr2) Output: before remove: [0, 1, 2, 3, 4, 5, 6] after removing index 3: [0, 1, 2, 4, 5, 6] after removing index 5: [0, 1, 2, 4, 5] after removing index 0: [1, 2, 4, 5] arr2 makes a copy of my_arr and removes index 1: [1, 4, 5]","title":"Remove"},{"location":"Core/array/#reverse-array-order","text":"reverse() - Reverses the order of elements in the array. Example: my_arr = [0, 1, 2, 3] my_arr = my_arr.reverse() print(my_arr) Output: [3, 2, 1, 0]","title":"Reverse Array Order"},{"location":"Core/array/#sample-from-array","text":"sample() - Returns a random entry in the array Example: arr = [1, 2, 3, \"a\", \"b\", \"c\"] print(arr.sample()) print(arr.sample()) Sample Output: a 2","title":"Sample From Array"},{"location":"Core/array/#show","text":"show() - Returns a string representation of the string Example: arr = [1, 2, \"a\", \"b\"] print(arr.show()) Output: [1, 2, a, b]","title":"Show"},{"location":"Core/array/#shuffle-array-contents","text":"shuffle() - Shuffles the contents of the array. Example: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] my_arr = my_arr.shuffle() new_arr = my_arr.shuffle() # will be my_arr shuffled again. print(\"my_arr: \" + my_arr) print(\"new_arr: \" + new_arr) Output: my_arr: [9, 3, 2, 1, 0, 6, 5, 7, 4, 8] new_arr: [1, 2, 9, 6, 8, 3, 7, 4, 0, 5]","title":"Shuffle Array Contents"},{"location":"Core/array/#size","text":"size() - Returns the size of the array. Example: my_arr = [0, 1, 2, 3] len = my_arr.size() print(\"my_arr length: \" + len) Output: my_arr length: 4","title":"Size"},{"location":"Core/array/#slice","text":"slice(start, end) - Returns a slice of the array indexed from start to, but not including, end . Example: my_arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] new_arr_1 = my_arr.slice(4, 8) # a sub-array new_arr_2 = my_arr.slice(0, array_length(my_arr)) # the entire array new_arr_3 = my_arr.slice(0, 0) # none of the array print(\"new_arr_1: \" + new_arr_1) print(\"new_arr_2: \" + new_arr_2) print(\"new_arr_3: \" + new_arr_3) Output: new_arr_1: [4, 5, 6, 7] new_arr_2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] new_arr_3: []","title":"Slice"},{"location":"Core/array/#sort-by-ascending-order","text":"sort() - Sorts the array in ascending order. Example: my_arr = [9, 3, 2, 1, 0, 6, 5, 7, 4, 8] my_arr = my_arr.sort() print(my_arr) Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","title":"Sort by Ascending Order"},{"location":"Core/array/#to-string","text":"to_string() - Return the array as a string. Example: my_arr = [1, 2, 3, 4] print(my_arr.to_string()) Output: [1, 2, 3, 4] # this is equivalent to the string \"[1, 2, 3, 4]\"","title":"To String"},{"location":"Core/array/#to-json","text":"to_json() - Returns a string that is a JSON representation of the array Example: arr = [1, 2, \"a\", \"b\"] print(arr.to_json()) Output: [1, 2, \"a\", \"b\"]","title":"To JSON"},{"location":"Core/array/#unique","text":"unique() - Returns a copy of the array with duplicate elements removed. Example: my_arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] my_arr = my_arr.unique() print(my_arr) my_arr = [2, 9, 2, 9, 9, 6, 4, 5, 9, 4, 3, 4, 6, 1, 5, 3, 4, 7, 5, 7, 8, 3] my_arr = my_arr.unique() print(my_arr) Output: [1, 2, 3, 4] [2, 9, 6, 4, 5, 3, 1, 7, 8]","title":"Unique"},{"location":"Core/boolean/","text":"Core Boolean Functions Boolean helper functions included in the core library. blz-ospl\\Packages\\Core\\BooleanUtil.blz Is nil? nil?() - Checks if the value is nil (always false) Example: print(false.nil?()) Output: false Negate negate() - Negates a boolean value Example: print(false.negate()) print(true.negate()) Output: true false Is true? true?() - Checks if the value is true Example: print(false.true?()) print(true.true?()) Output: false true Is false? false?() - Checks if the value is false Example: print(false.false?()) print(true.false?()) Output: true false","title":"Booleans"},{"location":"Core/boolean/#core-boolean-functions","text":"Boolean helper functions included in the core library. blz-ospl\\Packages\\Core\\BooleanUtil.blz","title":"Core Boolean Functions"},{"location":"Core/boolean/#is-nil","text":"nil?() - Checks if the value is nil (always false) Example: print(false.nil?()) Output: false","title":"Is nil?"},{"location":"Core/boolean/#negate","text":"negate() - Negates a boolean value Example: print(false.negate()) print(true.negate()) Output: true false","title":"Negate"},{"location":"Core/boolean/#is-true","text":"true?() - Checks if the value is true Example: print(false.true?()) print(true.true?()) Output: false true","title":"Is true?"},{"location":"Core/boolean/#is-false","text":"false?() - Checks if the value is false Example: print(false.false?()) print(true.false?()) Output: true false","title":"Is false?"},{"location":"Core/generic/","text":"This page is current as of v2.6 blz-ospl\\Packages\\Core\\StandardIO.blz Print print(x) - Prints a string with a new line character following Example: print(\"Hello world\") print(\"This is from blz\") Output: Hello world This is from blz Print No Newline print_no_newline(x) - Prints without appending a newline character Example: print_no_newline(\"Hello \") print_no_newline(\"World\") Output: Hello World Number Input number_input() - returns an integer or decimal number input by the user Example: user_input = number_input() # Execution stops until user inputs 5 print(user_input + 2) Output: 7 String Input string_input() - returns a string input by the user Example: user_input = string_input() # Execution stops until user inputs Hi there print(user_input) Output: Hi there Exit exit(code) - Exits execution of the program with the resulting code Example: exit(3) print(\"test\") Output: Program will exit with code 3 Raw Print raw_print(int) - Print the ascii representation of a character Example: raw_print(65) # Decimal 65 is ascii capital A Output: A Sleep sleep(milliseconds) - Suspends execution for the given number of milliseconds Example: print(1) sleep(1000) # Wait for a second print(2) Output 1 2 There will be a second pause between the 1 and the 2","title":"Generic"},{"location":"Core/generic/#print","text":"print(x) - Prints a string with a new line character following Example: print(\"Hello world\") print(\"This is from blz\") Output: Hello world This is from blz","title":"Print"},{"location":"Core/generic/#print-no-newline","text":"print_no_newline(x) - Prints without appending a newline character Example: print_no_newline(\"Hello \") print_no_newline(\"World\") Output: Hello World","title":"Print No Newline"},{"location":"Core/generic/#number-input","text":"number_input() - returns an integer or decimal number input by the user Example: user_input = number_input() # Execution stops until user inputs 5 print(user_input + 2) Output: 7","title":"Number Input"},{"location":"Core/generic/#string-input","text":"string_input() - returns a string input by the user Example: user_input = string_input() # Execution stops until user inputs Hi there print(user_input) Output: Hi there","title":"String Input"},{"location":"Core/generic/#exit","text":"exit(code) - Exits execution of the program with the resulting code Example: exit(3) print(\"test\") Output: Program will exit with code 3","title":"Exit"},{"location":"Core/generic/#raw-print","text":"raw_print(int) - Print the ascii representation of a character Example: raw_print(65) # Decimal 65 is ascii capital A Output: A","title":"Raw Print"},{"location":"Core/generic/#sleep","text":"sleep(milliseconds) - Suspends execution for the given number of milliseconds Example: print(1) sleep(1000) # Wait for a second print(2) Output 1 2 There will be a second pause between the 1 and the 2","title":"Sleep"},{"location":"Core/number/","text":"Core Numeric Functions The blz core standard library comes with some built in methods that you can perform on numbers. blz-ospl\\Packages\\Core\\NumberUtil.blz Is nil? nil?() - Returns if a number is nil (Always false) Example: is_nil = (3).nil?() print(is_nil) Output: false To Double to_double() - Coerces a number to be a double Example: print((3/2)) print((3/2).to_double()) Output: 3/2 1.5 Floor floor() - Performs the mathematical floor operation Example: print({pi}.floor()) print((5).floor()) Output: 3 5 Ceil ceil() - Performs the mathematical ceiling operation Example: print({pi}.ceil()) print((5).ceil()) Output: 4 5","title":"Numbers"},{"location":"Core/number/#core-numeric-functions","text":"The blz core standard library comes with some built in methods that you can perform on numbers. blz-ospl\\Packages\\Core\\NumberUtil.blz","title":"Core Numeric Functions"},{"location":"Core/number/#is-nil","text":"nil?() - Returns if a number is nil (Always false) Example: is_nil = (3).nil?() print(is_nil) Output: false","title":"Is nil?"},{"location":"Core/number/#to-double","text":"to_double() - Coerces a number to be a double Example: print((3/2)) print((3/2).to_double()) Output: 3/2 1.5","title":"To Double"},{"location":"Core/number/#floor","text":"floor() - Performs the mathematical floor operation Example: print({pi}.floor()) print((5).floor()) Output: 3 5","title":"Floor"},{"location":"Core/number/#ceil","text":"ceil() - Performs the mathematical ceiling operation Example: print({pi}.ceil()) print((5).ceil()) Output: 4 5","title":"Ceil"},{"location":"Core/resource/","text":"Updated as of v2.6 These are methods that you can perform on already open resources. This could be an open file, an open tcp connection, etc. blz-ospl\\Packages\\Core\\ResourceUtil.blz Close close() - Closes a resource Example: import FileSystem file = open(\"/\", \"r\") file.close() Has Next has_next?() - Checks if the resource has anything more to read Example: import FileSystem file = open(\"/\", \"r\") print(file.has_next?()) file.read_all() print(file.has_next?()) Output: true false Next next() - Reads the next unit from a resource (usually a byte) Example: import FileSystem file = open(\"/\", \"r\") print(file.next()) Output: b Read All read_all() - Reads all the contents of a resource and returns it Example: import FileSystem file = open(\"/lorem_ipsum\", \"r\") print(file.read_all()) Output: Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit Read Lines read_lines() - Reads all contents of a resource and converts to an array where each entry is a line in the resource Example: import FileSystem file = open(\"/lorem_ipsum\", \"r\") print(file.read_lines()) Output: [\"Neque porro quisquam est qui dolorem\", \"ipsum quia dolor sit amet, consectetur,\", \"adipisci velit\"] Write write(message) - Writes contents to a resource Example: import FileSystem file = open(\"/tmp/file\", \"cw\") file.write(\"this is only a test\\n\") file.close()","title":"Resources"},{"location":"Core/resource/#close","text":"close() - Closes a resource Example: import FileSystem file = open(\"/\", \"r\") file.close()","title":"Close"},{"location":"Core/resource/#has-next","text":"has_next?() - Checks if the resource has anything more to read Example: import FileSystem file = open(\"/\", \"r\") print(file.has_next?()) file.read_all() print(file.has_next?()) Output: true false","title":"Has Next"},{"location":"Core/resource/#next","text":"next() - Reads the next unit from a resource (usually a byte) Example: import FileSystem file = open(\"/\", \"r\") print(file.next()) Output: b","title":"Next"},{"location":"Core/resource/#read-all","text":"read_all() - Reads all the contents of a resource and returns it Example: import FileSystem file = open(\"/lorem_ipsum\", \"r\") print(file.read_all()) Output: Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit","title":"Read All"},{"location":"Core/resource/#read-lines","text":"read_lines() - Reads all contents of a resource and converts to an array where each entry is a line in the resource Example: import FileSystem file = open(\"/lorem_ipsum\", \"r\") print(file.read_lines()) Output: [\"Neque porro quisquam est qui dolorem\", \"ipsum quia dolor sit amet, consectetur,\", \"adipisci velit\"]","title":"Read Lines"},{"location":"Core/resource/#write","text":"write(message) - Writes contents to a resource Example: import FileSystem file = open(\"/tmp/file\", \"cw\") file.write(\"this is only a test\\n\") file.close()","title":"Write"},{"location":"Core/string/","text":"Core String Functions blz-ospl\\Packages\\Core\\StringUtil.blz These are some core string functions that are included in the Core package. Contains? contains?(substring) - Checks if a string contains a substring Example: string = \"hello\" print(string.contains?(\"he\")) print(string.contains?(\"hi\")) Output: true false Is Number? is_number?() - Checks if a string is a number Example: print(\"123\".is_number?()) print(\"123.123\".is_number?()) print(\"hi!\".is_number()) Output: true true false Length length() - Returns the length of a string Example: print(\"\".length()) print(\"asdf\".length()) print(\"four\".length()) Output: 0 4 4 Nil? nil?() - Is this value nil (no it's not) Example: print(\"\".nil?()) print(\"asdf\".nil?()) Output: false false Slice slice(start, end) - Slices a string between these indices Example: print(\"abc\".slice(0,0)) print(\"abc\".slice(0,1)) print(\"abc\".slice(0,3)) Output: a abc Sort sort() - Sorts a string based on unicode order Example: print(\"abc\".sort()) print(\"cab\".sort()) print(\"321abc\".sort()) Output: abc abc 123abc To Array to_array() - Converts a string to an array of singleton strings Example: print(\"\".to_array()) print(\"abc\".to_array()) Output: [] [\"a\", \"b\", \"c\"] To Number to_number() - Converts a string to a number (if it is one). Undefined for non-numbers Example: print(\"123\".to_number()) print(\"008675309\".to_number()) Output: 123 8675309 To String to_string() - Does nothing Example: print(\"This is useless\".to_string()) Output: This is useless Trim trim() - Trims whitespace on the end of the string Example: print(\" asdf\".trim()) Output: asdf","title":"Strings"},{"location":"Core/string/#core-string-functions","text":"blz-ospl\\Packages\\Core\\StringUtil.blz These are some core string functions that are included in the Core package.","title":"Core String Functions"},{"location":"Core/string/#contains","text":"contains?(substring) - Checks if a string contains a substring Example: string = \"hello\" print(string.contains?(\"he\")) print(string.contains?(\"hi\")) Output: true false","title":"Contains?"},{"location":"Core/string/#is-number","text":"is_number?() - Checks if a string is a number Example: print(\"123\".is_number?()) print(\"123.123\".is_number?()) print(\"hi!\".is_number()) Output: true true false","title":"Is Number?"},{"location":"Core/string/#length","text":"length() - Returns the length of a string Example: print(\"\".length()) print(\"asdf\".length()) print(\"four\".length()) Output: 0 4 4","title":"Length"},{"location":"Core/string/#nil","text":"nil?() - Is this value nil (no it's not) Example: print(\"\".nil?()) print(\"asdf\".nil?()) Output: false false","title":"Nil?"},{"location":"Core/string/#slice","text":"slice(start, end) - Slices a string between these indices Example: print(\"abc\".slice(0,0)) print(\"abc\".slice(0,1)) print(\"abc\".slice(0,3)) Output: a abc","title":"Slice"},{"location":"Core/string/#sort","text":"sort() - Sorts a string based on unicode order Example: print(\"abc\".sort()) print(\"cab\".sort()) print(\"321abc\".sort()) Output: abc abc 123abc","title":"Sort"},{"location":"Core/string/#to-array","text":"to_array() - Converts a string to an array of singleton strings Example: print(\"\".to_array()) print(\"abc\".to_array()) Output: [] [\"a\", \"b\", \"c\"]","title":"To Array"},{"location":"Core/string/#to-number","text":"to_number() - Converts a string to a number (if it is one). Undefined for non-numbers Example: print(\"123\".to_number()) print(\"008675309\".to_number()) Output: 123 8675309","title":"To Number"},{"location":"Core/string/#to-string","text":"to_string() - Does nothing Example: print(\"This is useless\".to_string()) Output: This is useless","title":"To String"},{"location":"Core/string/#trim","text":"trim() - Trims whitespace on the end of the string Example: print(\" asdf\".trim()) Output: asdf","title":"Trim"},{"location":"Learn/0-setup/","text":"","title":"0 setup"},{"location":"Learn/1-hello-world/","text":"Lesson 1: Hello World Now that you've got your blz environment set up, let's write our first program. Open a new file in a text editor. Call it hello.blz . print(\"Hello, *Your Name*\") Go ahead and save that. With a command prompt, navigate to where the file is. Now run blz hello.blz You should see: Hello, *Your Name* If you do, great! You've just written your first line of blz and you are ready to move on to the next lesson! If not, make sure that you followed all of the installation steps correctly. If you get some kind of error that seems to be coming from blz, post the error on the blz issues page with logs and you can get help.","title":"1.) Hello World"},{"location":"Learn/10-environment/","text":"","title":"10 environment"},{"location":"Learn/11-try-catch/","text":"","title":"11 try catch"},{"location":"Learn/12-file-ops/","text":"","title":"12 file ops"},{"location":"Learn/13-network/","text":"","title":"13 network"},{"location":"Learn/14-async/","text":"","title":"14 async"},{"location":"Learn/15-testing/","text":"","title":"15 testing"},{"location":"Learn/16-cli-options/","text":"","title":"16 cli options"},{"location":"Learn/2-values/","text":"Lesson 2: Values A core idea in programming languages is values . This is some kind of data that you want to store or manipulate. blz has several kinds of built in values: Numbers - integers, decimals, fractions (e.g. 1 , 2 , 1/2 , 3.141 ) Strings - a.k.a. text. Some characters wrapped around quotes (e.g. \"Hello World\" ) Booleans - The answer to a yes / no question. Either true or false Arrays - An ordered list. Comma seperated and in square brackets. (e.g. [1, 2, 3] ) Hash - Stores a 'value' which is accessed with a 'key' Objects - Used to give names to data Resources - Used for reading / writing to a file or making network requests In this section, we will just be learning about Numbers, Strings, and Booleans Numbers There are 3 kinds of numbers: Integers - a whole number; 1, 2, 20, -13, etc. Doubles - a number with a decimal point; 1.2, -0.21, 3.141592, 1.414 Fractions - a number with an integer numerator and denominator; 1/2, -2/3, 5/6, etc. In most cases, blz treats all numbers equally. Any exceptions should be pointed out explicitly. There are several standard operations that you can do with numbers. Open up the blz interactive mode by running blz -i to follow along. You can exit at any time by typing exit . Numbers can be added (+) or subtracted (-) > 2 + 2 4 > 2.2 + 3 + 4 9.2 > 1/2 + 1/3 5/6 > 5/2 - 1 3/2 > 2 - 5 -3 Numbers can be multiplied (*) or divided (/) > 2 * 4 8 > 0.1 * 10 1.0 > 1/10 * 10 1 > (1/10) / 10 1/100 Note - You can use parenthesis () to group the order of expressions You can use exponentiation (**) or logarithms (__ two underscores ) > 2 ** 3 8 > 2 ** 0.5 1.414213562373133720883631 > 100 __ 10 2.000000000000039 > 50 __ {e} 3.9120230054281 Note - {e} is a shortcut for the base of the natural logarithm. It is about 2.718 You can compare numbers using less than (<), greater than (>), less than or equal (<=), greater than or equal (>=), or equals (==) > 2 + 2 < 4 false > 2 + 2 <= 4 true > 2 * 4 > 3 true > 2 * 4 >= 200 false > 2 * 4 == 4 * 2 true Strings Strings are a list of characters, one after another. They are denoted by putting double quotes ( \" ) around some text. Use the interactive mode ( blz -i ) to follow along. You can declare some strings > \"Hello!\" Hello! > \"Test 1, 2, 3\" Test 1, 2, 3 > \"A new line can be added using \\n See?\" A new line can be added using See? Note, the \\ character lets you put in special characters. \\n is the most common Strings can be added > \"Strings \" + \"together\" Strings together > \"I \" + \"can \" + \"add \"+ \"multiple \" + \"strings!\" I can add multiple strings! You can see what character is at a particular index of a string by using the array lookup ( [] ) operator > \"Test\"[0] T > \"Test\"[1] e > \"Test\"[2] s > \"Test\"[3] t > \"Test\"[4] Error occurred on line 1 Out Of Bounds! Tried to access index 4 of string Test There was an issue running your last command Type 'err' to see the error Wow! A lot just happened. Let's try to break that down. Why did we start at 0? All index operations in blz (and most programming languages) count 0 as the first element What happened when we tried to access the 4th index (5th character)? By accessing the 4th index, we end up reading the 5th character (since 0 is an index). Well, the string \"Test\" only has 4 characters. So the 4th index is undefined. An error happened! So blz tried to give a helpful error message to tell you what went wrong. Booleans Booleans are simply the answer to a yes or no question. That is, they are either true , or false We can perform a logical and (&&) or a logical or (||) > true && false false > true && true true > false || false false > true || false true","title":"2.) Values"},{"location":"Learn/2-values/#numbers","text":"There are 3 kinds of numbers: Integers - a whole number; 1, 2, 20, -13, etc. Doubles - a number with a decimal point; 1.2, -0.21, 3.141592, 1.414 Fractions - a number with an integer numerator and denominator; 1/2, -2/3, 5/6, etc. In most cases, blz treats all numbers equally. Any exceptions should be pointed out explicitly. There are several standard operations that you can do with numbers. Open up the blz interactive mode by running blz -i to follow along. You can exit at any time by typing exit . Numbers can be added (+) or subtracted (-) > 2 + 2 4 > 2.2 + 3 + 4 9.2 > 1/2 + 1/3 5/6 > 5/2 - 1 3/2 > 2 - 5 -3 Numbers can be multiplied (*) or divided (/) > 2 * 4 8 > 0.1 * 10 1.0 > 1/10 * 10 1 > (1/10) / 10 1/100 Note - You can use parenthesis () to group the order of expressions You can use exponentiation (**) or logarithms (__ two underscores ) > 2 ** 3 8 > 2 ** 0.5 1.414213562373133720883631 > 100 __ 10 2.000000000000039 > 50 __ {e} 3.9120230054281 Note - {e} is a shortcut for the base of the natural logarithm. It is about 2.718 You can compare numbers using less than (<), greater than (>), less than or equal (<=), greater than or equal (>=), or equals (==) > 2 + 2 < 4 false > 2 + 2 <= 4 true > 2 * 4 > 3 true > 2 * 4 >= 200 false > 2 * 4 == 4 * 2 true","title":"Numbers"},{"location":"Learn/2-values/#strings","text":"Strings are a list of characters, one after another. They are denoted by putting double quotes ( \" ) around some text. Use the interactive mode ( blz -i ) to follow along. You can declare some strings > \"Hello!\" Hello! > \"Test 1, 2, 3\" Test 1, 2, 3 > \"A new line can be added using \\n See?\" A new line can be added using See? Note, the \\ character lets you put in special characters. \\n is the most common Strings can be added > \"Strings \" + \"together\" Strings together > \"I \" + \"can \" + \"add \"+ \"multiple \" + \"strings!\" I can add multiple strings! You can see what character is at a particular index of a string by using the array lookup ( [] ) operator > \"Test\"[0] T > \"Test\"[1] e > \"Test\"[2] s > \"Test\"[3] t > \"Test\"[4] Error occurred on line 1 Out Of Bounds! Tried to access index 4 of string Test There was an issue running your last command Type 'err' to see the error Wow! A lot just happened. Let's try to break that down. Why did we start at 0? All index operations in blz (and most programming languages) count 0 as the first element What happened when we tried to access the 4th index (5th character)? By accessing the 4th index, we end up reading the 5th character (since 0 is an index). Well, the string \"Test\" only has 4 characters. So the 4th index is undefined. An error happened! So blz tried to give a helpful error message to tell you what went wrong.","title":"Strings"},{"location":"Learn/2-values/#booleans","text":"Booleans are simply the answer to a yes or no question. That is, they are either true , or false We can perform a logical and (&&) or a logical or (||) > true && false false > true && true true > false || false false > true || false true","title":"Booleans"},{"location":"Learn/3-variables/","text":"","title":"3 variables"},{"location":"Learn/4-if/","text":"","title":"4 if"},{"location":"Learn/5-for/","text":"","title":"5 for"},{"location":"Learn/6-while/","text":"","title":"6 while"},{"location":"Learn/7-functions/","text":"","title":"7 functions"},{"location":"Learn/8a-constructors/","text":"","title":"8a constructors"},{"location":"Learn/8b-show/","text":"","title":"8b show"},{"location":"Learn/8c-comparison/","text":"","title":"8c comparison"},{"location":"Learn/9-bang/","text":"","title":"9 bang"},{"location":"Packages/csv/","text":"This is current as of v2.6 import using import CSV parse_csv parse_csv(string) - Parses a csv string into a 2 dimensional array The outer array is of rows, the inner arrays are of columns Example: import CSV print(parse_csv(\"a,b,c\")) print(parse_csv(\"1,2,3\\n4,5,6\")) Output: [[a, b, c]] [[1, 2, 3], [4, 5, 6]] Please note, this can throw an error if you pass a non-string.","title":"CSV"},{"location":"Packages/csv/#parse_csv","text":"parse_csv(string) - Parses a csv string into a 2 dimensional array The outer array is of rows, the inner arrays are of columns Example: import CSV print(parse_csv(\"a,b,c\")) print(parse_csv(\"1,2,3\\n4,5,6\")) Output: [[a, b, c]] [[1, 2, 3], [4, 5, 6]] Please note, this can throw an error if you pass a non-string.","title":"parse_csv"},{"location":"Packages/filesystem/","text":"This page is updated as of blz v2.6 The FileSystem package allows for creation of resources. Resources are currently either a file, or a network request. All operations to read from/write to resources are handled in the Core/Resource section Open open(filepath, mode=\"r\") - Opens the file at filepath. Either an absolute path, or relative to the PWD of the program. Mode - Modes can contain any of the following: * \"r\" - Read * \"w\" - Write * \"c\" - Create if it doesn't exist Example: import FileSystem try file = open(\"testfile.dat\", \"cw\") file.write(\"This is written to the file!\\n\") file.close() samefile = open(\"testfile.dat\") contents = samefile.read_all() print(contents) catch file_error print(\"Some file error occured! \" + file_error) end Open Http open_http(path, mode=\"r\") - Opens an http connection to the given path. Currently only supports reading. It is strongly recommended that you use open_https unless your endpoint does not support https Example import FileSystem try response = open_http(\"google.com\").read_all() print(response) catch network_error print(network_error) end Open Https open_https(path, mode=\"r\") - Opens an https connection to the given path. Currently only supports reading. Example import FileSystem try response = open_https(\"google.com\").read_all() print(response) catch network_error print(network_error) end","title":"FileSystem"},{"location":"Packages/filesystem/#open","text":"open(filepath, mode=\"r\") - Opens the file at filepath. Either an absolute path, or relative to the PWD of the program. Mode - Modes can contain any of the following: * \"r\" - Read * \"w\" - Write * \"c\" - Create if it doesn't exist Example: import FileSystem try file = open(\"testfile.dat\", \"cw\") file.write(\"This is written to the file!\\n\") file.close() samefile = open(\"testfile.dat\") contents = samefile.read_all() print(contents) catch file_error print(\"Some file error occured! \" + file_error) end","title":"Open"},{"location":"Packages/filesystem/#open-http","text":"open_http(path, mode=\"r\") - Opens an http connection to the given path. Currently only supports reading. It is strongly recommended that you use open_https unless your endpoint does not support https Example import FileSystem try response = open_http(\"google.com\").read_all() print(response) catch network_error print(network_error) end","title":"Open Http"},{"location":"Packages/filesystem/#open-https","text":"open_https(path, mode=\"r\") - Opens an https connection to the given path. Currently only supports reading. Example import FileSystem try response = open_https(\"google.com\").read_all() print(response) catch network_error print(network_error) end","title":"Open Https"},{"location":"Packages/json/","text":"This page is updated as of blz v2.6 The JSON package allows for parsing JSON strings into blz objects. Parse JSON parse_json(string) - parses string into a blz object, or throws JSONError Example json_string = \"\\\"im a string!\\\"\" print(parse_json(json_string)) Output im a string! Example 2: json_string = \"[1, 2, 3]\" print(parse_json(json_string)) Output 2: [1, 2, 3] Example 3: json_string = \"{\\\"key\\\": [1,2,3]}\" print(parse_json(json_string)) Output 3: {key=[1, 2, 3]} Example 4: parse_json(\"Invalid JSON!!!\") Output 4: JSON Error: Expected some JSON token, but reached end of string instead Constructor JSONError Has fields - message - with the error message - type - \"JSON\" string literal","title":"JSON"},{"location":"Packages/json/#parse-json","text":"parse_json(string) - parses string into a blz object, or throws JSONError Example json_string = \"\\\"im a string!\\\"\" print(parse_json(json_string)) Output im a string! Example 2: json_string = \"[1, 2, 3]\" print(parse_json(json_string)) Output 2: [1, 2, 3] Example 3: json_string = \"{\\\"key\\\": [1,2,3]}\" print(parse_json(json_string)) Output 3: {key=[1, 2, 3]} Example 4: parse_json(\"Invalid JSON!!!\") Output 4: JSON Error: Expected some JSON token, but reached end of string instead","title":"Parse JSON"},{"location":"Packages/json/#constructor-jsonerror","text":"Has fields - message - with the error message - type - \"JSON\" string literal","title":"Constructor JSONError"},{"location":"Packages/lists/","text":"This page is updated as of blz v2.6 The Lists package aims to contain standard List data structures. Range range(end) - Returns an array containing all integers [0, end) range(start, end) - Returns an array containing all integers [start, end) Example: import Lists print(range(2)) print(range(2, 5)) Output: [0, 1] [2, 3, 4] Iterator Iterator(array) - Creates an iterator over an array Iterator::has_next? has_next?() - Returns a boolean if the iterator has a next element Example: import Lists it1 = Iterator([]) it2 = Iterator([1]) print(it1.has_next?()) print(it2.has_next?()) Output: false true Iterator::next next() - Returns the next element Example: import Lists it = Iterator([1, 2, 3]) print(it.next()) print(it.next()) print(it.next()) Output: 1 2 3 Iterator::remaining remaining() - Returns the remaining part of the list Example: import Lists it = Iterator([1, 2, 3]) print(it.remaining()) it.next() print(it.remaining()) it.next() print(it.remaining()) it.next() print(it.remaining()) Output: [1, 2, 3] [2, 3] [3] [] LinkedList LinkedList(value) - Creates a LinkedList with 1 element (value) You can access the first elements value using list.value and the tail of the list using list.next LinkedList::add add(value) - Adds the value to the end of the linked list Note this is an O(n) operation Example: import Lists list = LinkedList(1) print(list) list.add(2) print(list) Output: 1 1, 2 LinkedList::add_at_beginning add_at_beginning(value) - Adds the value to the beginning of a linked list Note this is an O(1) operation NOTE: This operation does not mutate, you must use reassignmnet Example: import Lists list = LinkedList(1) print(list) list = list.add_at_beginning(0) # Must use reassignment print(list) Output: 1 0, 1 LinkedList::length length() - Returns the length of the linked list Note this is an O(n) operation Example: import Lists list = LinkedList(1) print(list.length()) list.add(2) print(list.length()) Output: 1 2","title":"Lists"},{"location":"Packages/lists/#range","text":"range(end) - Returns an array containing all integers [0, end) range(start, end) - Returns an array containing all integers [start, end) Example: import Lists print(range(2)) print(range(2, 5)) Output: [0, 1] [2, 3, 4]","title":"Range"},{"location":"Packages/lists/#iterator","text":"Iterator(array) - Creates an iterator over an array","title":"Iterator"},{"location":"Packages/lists/#iteratorhas_next","text":"has_next?() - Returns a boolean if the iterator has a next element Example: import Lists it1 = Iterator([]) it2 = Iterator([1]) print(it1.has_next?()) print(it2.has_next?()) Output: false true","title":"Iterator::has_next?"},{"location":"Packages/lists/#iteratornext","text":"next() - Returns the next element Example: import Lists it = Iterator([1, 2, 3]) print(it.next()) print(it.next()) print(it.next()) Output: 1 2 3","title":"Iterator::next"},{"location":"Packages/lists/#iteratorremaining","text":"remaining() - Returns the remaining part of the list Example: import Lists it = Iterator([1, 2, 3]) print(it.remaining()) it.next() print(it.remaining()) it.next() print(it.remaining()) it.next() print(it.remaining()) Output: [1, 2, 3] [2, 3] [3] []","title":"Iterator::remaining"},{"location":"Packages/lists/#linkedlist","text":"LinkedList(value) - Creates a LinkedList with 1 element (value) You can access the first elements value using list.value and the tail of the list using list.next","title":"LinkedList"},{"location":"Packages/lists/#linkedlistadd","text":"add(value) - Adds the value to the end of the linked list Note this is an O(n) operation Example: import Lists list = LinkedList(1) print(list) list.add(2) print(list) Output: 1 1, 2","title":"LinkedList::add"},{"location":"Packages/lists/#linkedlistadd_at_beginning","text":"add_at_beginning(value) - Adds the value to the beginning of a linked list Note this is an O(1) operation NOTE: This operation does not mutate, you must use reassignmnet Example: import Lists list = LinkedList(1) print(list) list = list.add_at_beginning(0) # Must use reassignment print(list) Output: 1 0, 1","title":"LinkedList::add_at_beginning"},{"location":"Packages/lists/#linkedlistlength","text":"length() - Returns the length of the linked list Note this is an O(n) operation Example: import Lists list = LinkedList(1) print(list.length()) list.add(2) print(list.length()) Output: 1 2","title":"LinkedList::length"},{"location":"Packages/math/","text":"This page is updated as of blz v2.6 Math Functions blz-ospl\\Packages\\Math Absolute Value abs(x) - Returns the absolute value of x. Example: print(abs(-1)) print(abs(1)) Output: 1 1 Ceiling ceil(x) - Returns the most negative value that is greater than or equal to the argument and is equal to a mathematical integer. Example: print(ceil(20.123)) print(ceil(20)) print(ceil(-4)) Output: 21.000 20 -4 Sine sin(x, series_terms=10) - Uses the taylor series to estimate the sine of x sine(x, series_terms=10) - Alias for sin REPL Example: > sin({pi}) -5.2766142900984368597313941528129E-10 > sin({pi}/2) 0.99999999999999974410647080493330636301677176084 Cosine cos(x, series_terms=10) - Uses the taylor series to estimate the cosine of x cosine(x, series_terms=10) - Alias for cos REPL Example: > cos({pi}) -1.00000257598757145040413463536951038353 > cos({pi}/2) -5.2766142900984368597313941528129E-10 Tangent tan(x, series_terms=10) - Uses the taylor series to estimate the tangent of x tangent(x, series_terms=10) - Alias for tan Cotangent cot(x, series_terms=10) - Uses the taylor series to estimate the cotangent of x cotangent(x, series_terms=10) - Alias for cot","title":"Math"},{"location":"Packages/math/#math-functions","text":"blz-ospl\\Packages\\Math","title":"Math Functions"},{"location":"Packages/math/#absolute-value","text":"abs(x) - Returns the absolute value of x. Example: print(abs(-1)) print(abs(1)) Output: 1 1","title":"Absolute Value"},{"location":"Packages/math/#ceiling","text":"ceil(x) - Returns the most negative value that is greater than or equal to the argument and is equal to a mathematical integer. Example: print(ceil(20.123)) print(ceil(20)) print(ceil(-4)) Output: 21.000 20 -4","title":"Ceiling"},{"location":"Packages/math/#sine","text":"sin(x, series_terms=10) - Uses the taylor series to estimate the sine of x sine(x, series_terms=10) - Alias for sin REPL Example: > sin({pi}) -5.2766142900984368597313941528129E-10 > sin({pi}/2) 0.99999999999999974410647080493330636301677176084","title":"Sine"},{"location":"Packages/math/#cosine","text":"cos(x, series_terms=10) - Uses the taylor series to estimate the cosine of x cosine(x, series_terms=10) - Alias for cos REPL Example: > cos({pi}) -1.00000257598757145040413463536951038353 > cos({pi}/2) -5.2766142900984368597313941528129E-10","title":"Cosine"},{"location":"Packages/math/#tangent","text":"tan(x, series_terms=10) - Uses the taylor series to estimate the tangent of x tangent(x, series_terms=10) - Alias for tan","title":"Tangent"},{"location":"Packages/math/#cotangent","text":"cot(x, series_terms=10) - Uses the taylor series to estimate the cotangent of x cotangent(x, series_terms=10) - Alias for cot","title":"Cotangent"},{"location":"Packages/test/","text":"This page is updated as of blz v2.6 The test package aims to help users write tests for their programs. The entire package revolves around one method expect Expect expect(value, exit_on_failure=true) - Declaration of a value to be tested If exit_on_failure is true and an assertion fails, the program will exit with error code 1. See below for examples Expect::is expect(value).is(other) - Asserts that two values are equal Example: import Test expect(2 + 2).is(4) expect([1, 2, 3]).is([1, 2, 3]) expect(\"hi\").is(\"bye\") # Will fail and exit the program Expect::is_not expect(value).is_not(other) - Asserts that two values are not equal Example: import Test expect(2 + 2).is_not(5) expect(\"one string\").is_not(\"another\") Expect::is_greater_than expect(value).is_greater_than(another) - Asserts that a value is greater than or equal to another Example: import Test expect(4).is_greater_than(3) expect(\"b\").is_greater_than(\"a\") expect(4).is_greater_than(4) expect(5).is_greater_than(6) # Will fail and exit the program Expect::is_less_than expect(value).is_less_than(another) - Alias for expect(another).is_greater_than(value) Expect::to_be expect(value).to_be(another) - Alias for Expect::is Expect::to_not_be expect(value).to_not_be(another) - Alias for Expect::is_not Expect::is_not_nil expect(value).is_not_nil() - Alias for expect(value).is_not({blz.nil}) Expect::is_nil expect(value).is_nil() - Alias for expect(value).is({blz.nil}) Expect::is_true expect(value).is_true() - Alias for expect(value).is(true) Expect::is_false expect(value).is_false() - Alias for expect(value).is(false)","title":"Test"},{"location":"Packages/test/#expect","text":"expect(value, exit_on_failure=true) - Declaration of a value to be tested If exit_on_failure is true and an assertion fails, the program will exit with error code 1. See below for examples","title":"Expect"},{"location":"Packages/test/#expectis","text":"expect(value).is(other) - Asserts that two values are equal Example: import Test expect(2 + 2).is(4) expect([1, 2, 3]).is([1, 2, 3]) expect(\"hi\").is(\"bye\") # Will fail and exit the program","title":"Expect::is"},{"location":"Packages/test/#expectis_not","text":"expect(value).is_not(other) - Asserts that two values are not equal Example: import Test expect(2 + 2).is_not(5) expect(\"one string\").is_not(\"another\")","title":"Expect::is_not"},{"location":"Packages/test/#expectis_greater_than","text":"expect(value).is_greater_than(another) - Asserts that a value is greater than or equal to another Example: import Test expect(4).is_greater_than(3) expect(\"b\").is_greater_than(\"a\") expect(4).is_greater_than(4) expect(5).is_greater_than(6) # Will fail and exit the program","title":"Expect::is_greater_than"},{"location":"Packages/test/#expectis_less_than","text":"expect(value).is_less_than(another) - Alias for expect(another).is_greater_than(value)","title":"Expect::is_less_than"},{"location":"Packages/test/#expectto_be","text":"expect(value).to_be(another) - Alias for Expect::is","title":"Expect::to_be"},{"location":"Packages/test/#expectto_not_be","text":"expect(value).to_not_be(another) - Alias for Expect::is_not","title":"Expect::to_not_be"},{"location":"Packages/test/#expectis_not_nil","text":"expect(value).is_not_nil() - Alias for expect(value).is_not({blz.nil})","title":"Expect::is_not_nil"},{"location":"Packages/test/#expectis_nil","text":"expect(value).is_nil() - Alias for expect(value).is({blz.nil})","title":"Expect::is_nil"},{"location":"Packages/test/#expectis_true","text":"expect(value).is_true() - Alias for expect(value).is(true)","title":"Expect::is_true"},{"location":"Packages/test/#expectis_false","text":"expect(value).is_false() - Alias for expect(value).is(false)","title":"Expect::is_false"},{"location":"Packages/timer/","text":"This page is current as of blz v2.6 The timer package aims to help with timing parts of program execution, particularily for performance testing purposes. Timer Timer() - Creates a new timer Example: import Timer timer = Timer() Timer::start start() - (Re)starts the timer A timer is already started when it is created, but if you want finer control on when it is started, use this method. Example: import Timer timer = Timer() # Do some stuff timer.start() Timer::seconds_elapsed seconds_elapsed() - Returns a number representing the number of seconds elapsed Example: import Timer timer = Timer() sleep(1000) print(timer.seconds_elapsed()) Sample Output: 21/20 Timer::milliseconds_elapsed milliseconds_elapsed() - Returns an integer representing the number of milliseconds elapsed Example: import Timer timer = Timer() sleep(1000) print(timer.millseconds_elapsed()) Sample Output: 1000","title":"Timer"},{"location":"Packages/timer/#timer","text":"Timer() - Creates a new timer Example: import Timer timer = Timer()","title":"Timer"},{"location":"Packages/timer/#timerstart","text":"start() - (Re)starts the timer A timer is already started when it is created, but if you want finer control on when it is started, use this method. Example: import Timer timer = Timer() # Do some stuff timer.start()","title":"Timer::start"},{"location":"Packages/timer/#timerseconds_elapsed","text":"seconds_elapsed() - Returns a number representing the number of seconds elapsed Example: import Timer timer = Timer() sleep(1000) print(timer.seconds_elapsed()) Sample Output: 21/20","title":"Timer::seconds_elapsed"},{"location":"Packages/timer/#timermilliseconds_elapsed","text":"milliseconds_elapsed() - Returns an integer representing the number of milliseconds elapsed Example: import Timer timer = Timer() sleep(1000) print(timer.millseconds_elapsed()) Sample Output: 1000","title":"Timer::milliseconds_elapsed"}]}